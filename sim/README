* Simulator model

  The simulator is primarily designed to perform memory
  studies. It models a system as a hierarchy of memory components
  connected to different processor cores. For example a 2-core
  system with a 3-level cache hierarchy (private L1 and L2, and
  shared L3 cache) will be modeled as follows:

  Core 0 --> L1 --> L2 
                       \
                         --> L3 --> Memory Controller
                       /
  Core 1 --> L1 --> L2

  
* Cores
  
  Each core is connected to a trace file which lists the set of
  memory instructions in the corresponding application. Non-memory
  instructions are assumed to take a single cycle. Start with the
  OoOTraceSimulator.{cc,h} files.


* Components

  An abstract memory component (MemoryComponent.h) implements two
  functions: ProcessRequest and ProcessReturn.

  ProcessRequest determines what the component should do when a
  request is arriving from the processor side -- e.g., the cache
  will determine if the access is a cache hit, a prefetcher will
  determine if new prefetches should be generated.

  ProcessReturn determines what the component should do when a
  request returns from the memory side -- e.g., the cache will
  insert the cache block into the tag/data store.

  
* Simulator definition

  A simulator definition defines a new system with the list of
  components in the system and how the components are wired up
  together. Take a look at Definitions/2-core/baseline for
  example. (MemorySimulator.h)
